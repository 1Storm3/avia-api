// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: passenger.sql

package gensqlc

import (
	"context"

	"github.com/google/uuid"
)

const deletePassenger = `-- name: DeletePassenger :exec
DELETE
FROM passengers
WHERE id = $1
`

type DeletePassengerParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) DeletePassenger(ctx context.Context, arg DeletePassengerParams) error {
	_, err := q.db.Exec(ctx, deletePassenger, arg.ID)
	return err
}

const updatePassenger = `-- name: UpdatePassenger :one
UPDATE passengers
SET first_name  = COALESCE($1, first_name),
    last_name   = COALESCE($2, last_name),
    middle_name = COALESCE($3, middle_name)
WHERE id = $4 RETURNING id, first_name, last_name, middle_name
`

type UpdatePassengerParams struct {
	FirstName  string    `json:"first_name"`
	LastName   string    `json:"last_name"`
	MiddleName string    `json:"middle_name"`
	ID         uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePassenger(ctx context.Context, arg UpdatePassengerParams) (*Passenger, error) {
	row := q.db.QueryRow(ctx, updatePassenger,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.ID,
	)
	var i Passenger
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
	)
	return &i, err
}
