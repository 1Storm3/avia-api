// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: document.sql

package gensqlc

import (
	"context"

	"github.com/google/uuid"
)

const deleteDocument = `-- name: DeleteDocument :exec
DELETE
FROM documents
WHERE id = $1
`

type DeleteDocumentParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) DeleteDocument(ctx context.Context, arg DeleteDocumentParams) error {
	_, err := q.db.Exec(ctx, deleteDocument, arg.ID)
	return err
}

const getDocumentsByPassenger = `-- name: GetDocumentsByPassenger :many
SELECT id, passenger_id, type, number
FROM documents
WHERE passenger_id = $1
`

type GetDocumentsByPassengerParams struct {
	PassengerID *uuid.UUID `json:"passenger_id"`
}

func (q *Queries) GetDocumentsByPassenger(ctx context.Context, arg GetDocumentsByPassengerParams) ([]*Document, error) {
	rows, err := q.db.Query(ctx, getDocumentsByPassenger, arg.PassengerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.PassengerID,
			&i.Type,
			&i.Number,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDocument = `-- name: UpdateDocument :one
UPDATE documents
SET type = COALESCE($1, type),
    number = COALESCE($2, number)
WHERE id = $3 RETURNING id, passenger_id, type, number
`

type UpdateDocumentParams struct {
	Type   string    `json:"type"`
	Number string    `json:"number"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) (*Document, error) {
	row := q.db.QueryRow(ctx, updateDocument, arg.Type, arg.Number, arg.ID)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.PassengerID,
		&i.Type,
		&i.Number,
	)
	return &i, err
}
